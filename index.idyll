[meta
  title:"Winning 3-card monte"
  description:"How your skill is irrelevant at the 3 card monte."
  shareImageUrl:"https://fredhohman.com/card-shuffling/static/images/share.png"
  shareImageWidth:"1600"
  shareImageHeight:"800" /]

[Header
  title:"Can you win 3-card monte?"
  subtitle:"How a simple card game can separate skill from probability"
  author:"Jithin George, Alex Fang, Richard Yu"
 /]

[Analytics google:"UA-42146340-1" /]


// [aside]
// Smooshing a deck is arguably more fun.
// [image style:`{width: '100%'}` src:"static/images/smoosh.gif" /]
// [/aside]

[image style:`{width: '100%'}` src:"static/images/monte.gif" /]





You walk up to a busy city corner and spot a lone street-magician with three cards on a table.  Interested, you ask him what magic could possibly come out of these cards.  
He flips over one of the cards and shows you an ace of spades.  
 
**He asks you for $5. He proposes to you that if you can keep track of this ace of spades ([card number:"A" suit:"S"/]) he'll give you $10 back.**  [br/]

So, you either lose $5 or win $5. To win at this game, you would need to pick the right card with a probability of 50% or more. Confident in your abilities to track his hands, you believe that will help you have a higher probability of picking the right card. So, you agree to the terms and in an instant he flips the cards over and shuffles the three cards multiple times, and stops, leaving you to select which card is the queen.


[aside]
[The wikipedia page](https://en.wikipedia.org/wiki/Three-card_Monte) for three-card monte commonly refers it as a "short con" where the magician would hire accomplices, or shills, to rig the game.  

This simulation aims to show how even a winning a fair game is random chance after a few shuffles.[/aside]

**So here's the question:**
[br/]
*How relevant is  your skill in winning tracking the cards as the number of shuffles the magician makes increases just a little?*

## Game Setup
In a typical setup, three cards are laid out on a table, one of which is the "money card", in this case [card number:"A" suit:"S"/], that if kept track of rewards a prize.  

Selecting one of the other two cards means you lose your bet. 

Let's say the two loser cards are [card number:"2" suit:"S"/], [card number:"3" suit:"S"/], and as previously mentioned, the "money card" is the [card number:"A" suit:"S"/].

So the game setup looks like this:

[cardVis static:"True"/]

Once you see the starting position of the cards, they are flipped over to conceal their faces.  The magician proceeds to shuffle, or swap the position of any two of the three cards, and it is the player's job to select the [card number:"A" suit:"S"/] when he finishes.

## Theory
Uncertainity in this game or at least part of the uncertainty comes from not registering a shuffle in your brain. 
So, skill in this game can be represented by an accuracy [Equation] \alpha[/Equation] that you successfully track a shuffle of two cards.  That is, 

>the probability that you know the exact position of the winner card after the shuffle takes place. 

Suppose we know that the cards initially  are ([card number:"2" suit:"S"/], [card number:"A" suit:"S"/], [card number:"3" suit:"S"/]). 
So, the probabilities of the left , middle and right cards being [card number:"A" suit:"S"/] are (0,1,0).
Now, suppose you believe a shuffle happened between the middle and right cards with accuracy [Equation] \alpha[/Equation].
The new probabilities would be [Equation](0,(1-\alpha)1+\alpha 0, \alpha1 + (1-\alpha)0)[/Equation]

In general, if the initial probabilities were : [Equation](p_0, p_1, p_2)[/Equation] 

And you believed a shuffle happened between the second and third cards, the new probabilities would be:
[Equation display:true]
(p_0, (1-\alpha)p_1+\alpha p_2, (1-\alpha)p_2+\alpha p_1)
[/Equation]


## Let's play


Imagine you had decent accuracy at tracking the shuffles. Say your accuracy is 0.6. Try flipping the cards and shuffling them

[var name:"iter" value:0 /]
[var name:"flipvalue" value:0 /]
[var name:"accuracy" value:0.6 /]
[var name:"shufflevalue" value:1 /]
[var name:"points" value:`[{x:0,y:52}]`/]
[var name:"endPoints" value:`[]` /]
[var name:"probability" value:`[0,1,0]` /]
[var name:"pts" value:`[{p_0:0, p_1:1, p_2: 0}]` /]



[aside]
You have shuffled **[Display value:iter format:"d" /]** times.
[br/]
[button onClick:`if(points[points.length-1].y !== 1){ if (flipvalue == 1){flipvalue = 0}else{flipvalue = 1}; shufflevalue = 1}`]Flip[/button]
[button onClick:`if(points[points.length-1].y !== 1){iter++;  shufflevalue = 0; shuffleIndex=iter}`]Shuffle[/button]
[multiRiffle iter:iter points:points ]Shuffle (x10)[/multiRiffle]
[p ]
Shuffle Index: [Display value:`shuffleIndex.toFixed(0)` /] [br /] 
[var name:"shuffleIndex" value:0 /]
[Range value:shuffleIndex min:0 max:iter step:1 /]
[/p]
[/aside]

[cardVis iterVar:iter points:points flipswitch:flipvalue shuffleswitch:shufflevalue probability:probability pts:pts accuracy:accuracy/]
[var name:"shufflevalue" value:1 /]

Here is a chart.

[aside]
[button className:"clear" onClick:`{iter= 0; pts = []; probability = [0,1,0]; points = [{x:0,y:52}];flipvalue = 0; shufflevalue =1; shuffleIndex=0}`]Clear[/button]
[barChart pts:pts shuffleIndex:shuffleIndex/]
[/aside]
[positionChart iterVal:iter endPoints:endPoints probability:probability pts:pts accuracy:accuracy/]


So, you see that it only takes a few shuffles after which the probability of all cards go below 0.5. At that point, you lose your advantage and the magician is likely to make money off you. 



## Let's play with a higher accuracy

Suppose you were indeed a person of great skill, possessing sharper eyes than most. Your accuracy would be around 0.8. Would that make a difference.

[var name:"iter1" value:0 /]
[var name:"flipvalue1" value:0 /]
[var name:"shufflevalue1" value:1 /]
[var name:"accuracy1" value:0.8 /]
[var name:"points1" value:`[{x:0, y:52}]` /]
[var name:"endPoints1" value:`[]` /]
[var name:"probability1" value:`[0,1,0]` /]
[var name:"pts1" value:`[{p_0:0, p_1:1, p_2: 0}]` /]

[aside]
You have shuffled **[Display value:iter1 format:"d" /]** times.
[br/]
[button onClick:`if (flipvalue1 == 1){flipvalue1 = 0}else{flipvalue1 = 1}; shufflevalue1 = 1`]Flip[/button]
[button onClick:`console.log('rrrr');iter1++;  shufflevalue1 = 0; shuffleIndex1=iter1`]Shuffle[/button]
[p ]
Shuffle Index: [Display value:`shuffleIndex1.toFixed(0)` /] [br /] 
[var name:"shuffleIndex1" value:0 /]
[Range value:shuffleIndex1 min:0 max:iter1 step:1 /]
[/p]
[/aside]

[cardVis iterVar:iter1 points:points1 flipswitch:flipvalue1 shuffleswitch:shufflevalue1 probability:probability1 pts:pts1 accuracy:accuracy1/]
[var name:"shufflevalue1" value:1 /]

Here is a chart.

[aside]
[button className:"clear" onClick:`iter1= 0; pts1 = []; probability1 = [0,1,0]; points1 = [{x:0,y:52}];flipvalue1 = 0; shufflevalue1 =1;shuffleIndex1=0`]Clear[/button]
[barChart pts:pts1 shuffleIndex:shuffleIndex1/]
[/aside]
[positionChart iterVal:iter1 endPoints:endPoints1 probability:probability1 pts:pts1 accuracy:accuracy1/]


You see that regardless of your accuracy it only takes a few more shuffles until the magician takes the advantage from you.


You can play more below by changing the accuracy below, restarting and trying new simulations.


## Let's play with a variable accuracy


[var name:"iter2" value:0 /]
[var name:"flipvalue2" value:0 /]
[var name:"shufflevalue2" value:1 /]
[var name:"points2" value:`[{x:0, y:52}]` /]
[var name:"endPoints2" value:`[]` /]
[var name:"probability2" value:`[0,1,0]` /]
[var name:"pts2" value:`[{p_0:0, p_1:1, p_2: 0}]` /]
[var name:"accuracy2" value: 0.8/]
Accuracy: [TextInput value:accuracy2 /] [button className:"Clear" onClick:`iter2= 0; pts2 = []; probability2 = [0,1,0]; points2 = [{x:0,y:52}];flipvalue2 = 0; shufflevalue2 =1;shuffleIndex2=0`]Restart[/button]

[aside]
You have shuffled **[Display value:iter2 format:"d" /]** times.
[br/]
[button onClick:`if (flipvalue2 == 1){flipvalue2 = 0}else{flipvalue2 = 1}; shufflevalue2 = 1`]Flip[/button]
[button onClick:`console.log('rrrr');iter2++; Â shufflevalue2 = 0; shuffleIndex2=iter2`]Shuffle[/button]
[p ]
Shuffle Index: [Display value:`shuffleIndex1.toFixed(0)` /] [br /] 
[var name:"shuffleIndex2" value:0 /]
[Range value:shuffleIndex2 min:0 max:iter2 step:1 /]
[/p]
[/aside]

[cardVis iterVar:iter2 points:points2 flipswitch:flipvalue2 shuffleswitch:shufflevalue2 probability:probability2 pts:pts2 accuracy:accuracy2/]
[var name:"shufflevalue2" value:1 /]

Here is a chart.

[aside]
[button className:"clear" onClick:`iter2= 0; pts2 = []; probability2 = [0,1,0]; points2 = [{x:0,y:52}];flipvalue2 = 0; shufflevalue2 =1;shuffleIndex2=0`]Clear[/button]
[barChart pts:pts2 shuffleIndex:shuffleIndex2/]
[/aside]
[positionChart iterVal:iter2 endPoints:endPoints2 probability:probability2 pts:pts2 accuracy:accuracy2/]


