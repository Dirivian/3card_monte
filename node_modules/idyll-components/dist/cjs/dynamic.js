'use strict';

exports.__esModule = true;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ReactDOM = require('react-dom');
var Format = require('d3-format');
var Drag = require('d3-drag');
var Selection = require('d3-selection');

var Dynamic = function (_React$PureComponent) {
  _inherits(Dynamic, _React$PureComponent);

  function Dynamic() {
    _classCallCheck(this, Dynamic);

    return _possibleConstructorReturn(this, _React$PureComponent.apply(this, arguments));
  }

  Dynamic.prototype.componentDidMount = function componentDidMount() {
    var _this2 = this;

    var node = void 0;
    try {
      node = ReactDOM.findDOMNode(this);
    } catch (e) {};
    if (!node) {
      return;
    }
    this.drag = Drag.drag().on('drag', function () {
      var dx = Selection.event.dx;
      var _props = _this2.props,
          step = _props.step,
          value = _props.value,
          interval = _props.interval;

      var newValue = Math.max(Math.min(value + (step || interval) * dx, _this2.props.max), _this2.props.min);
      _this2.props.updateProps({ value: newValue });
    });
    this.drag(Selection.select(node));
  };

  Dynamic.prototype.render = function render() {
    var _props2 = this.props,
        format = _props2.format,
        value = _props2.value;

    var formatter = Format.format(format);
    return _react2.default.createElement(
      'span',
      { className: 'idyll-dynamic' },
      formatter(value)
    );
  };

  return Dynamic;
}(_react2.default.PureComponent);

Dynamic.defaultProps = {
  format: '.2f',
  min: Number.NEGATIVE_INFINITY,
  max: Number.POSITIVE_INFINITY,
  step: 1
};

Dynamic._idyll = {
  name: "Dynamic",
  tagType: "closed",
  props: [{
    name: "value",
    type: "number",
    example: "x"
  }, {
    name: "step",
    type: "string",
    example: '1'
  }, {
    name: "min",
    type: "number",
    example: '-100'
  }, {
    name: "max",
    type: "number",
    example: '100'
  }]
};

exports.default = Dynamic;