'use strict';

exports.__esModule = true;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _container = require('./container');

var _container2 = _interopRequireDefault(_container);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Screen = function (_React$PureComponent) {
  _inherits(Screen, _React$PureComponent);

  function Screen(props) {
    _classCallCheck(this, Screen);

    return _possibleConstructorReturn(this, _React$PureComponent.call(this, props));
  }

  Screen.prototype.render = function render() {
    var overlayStyle = {
      position: this.props.display ? this.props.display : 'relative',
      zIndex: 1,
      width: this.props.fullBleed ? '100%' : undefined,
      left: this.props.display === 'fixed' ? 0 : undefined,
      pointerEvents: 'none',
      transition: 'background 0.5s'
    };

    if (this.props.height) {
      overlayStyle.minHeight = this.props.height;
    } else {
      overlayStyle.height = '100vh';
    }

    if (this.props.backgroundImage) {
      overlayStyle.backgroundImage = 'url(' + this.props.backgroundImage + ')';
      overlayStyle.backgroundSize = 'cover';
      overlayStyle.backgroundPosition = 'top center';
    }

    var contentContainerStyle = Object.assign({
      flexDirection: this.props.direction || 'column',
      display: 'flex',
      height: '100%',
      justifyContent: {
        center: 'center'
      }[this.props.justify] || undefined
    }, this.props.contentContainerStyle || {});

    var contentStyle = {
      alignSelf: {
        left: 'flex-start',
        center: 'center',
        right: 'flex-end',
        stretch: 'stretch'
      }[this.props.align] || 'flex-end',
      pointerEvents: 'all'
    };

    if (this.props.fullBleed) {
      return _react2.default.createElement(
        'div',
        { style: { overflow: 'hidden' } },
        _react2.default.createElement(
          'div',
          { style: Object.assign({}, overlayStyle, { position: 'absolute', left: 0 }) },
          _react2.default.createElement(
            'div',
            { style: contentContainerStyle },
            _react2.default.createElement('div', { style: { display: 'flex', flex: this.props.position } }),
            _react2.default.createElement(
              'div',
              { style: contentStyle, className: 'screen-content' },
              this.props.children
            ),
            _react2.default.createElement('div', { style: { display: 'flex', flex: 1 - this.props.position } })
          )
        ),
        _react2.default.createElement('div', { style: { width: '100%', height: '100vh' } })
      );
    }

    return _react2.default.createElement(
      _container2.default,
      { style: overlayStyle,
        className: this.props.className,
        fullBleed: this.props.fullBleed,
        expand: this.props.expand,
        expandLeft: this.props.display === 'fixed' ? 0 : this.props.expandLeft,
        expandRight: this.props.display === 'fixed' ? 0 : this.props.expandRight,
        padding: this.props.padding
      },
      _react2.default.createElement(
        'div',
        { style: contentContainerStyle },
        _react2.default.createElement('div', { style: { display: 'flex', flex: this.props.position } }),
        _react2.default.createElement(
          'div',
          { style: contentStyle, className: 'screen-content' },
          this.props.children
        ),
        _react2.default.createElement('div', { style: { display: 'flex', flex: 1 - this.props.position } })
      )
    );
  };

  return Screen;
}(_react2.default.PureComponent);

Screen.defaultProps = {
  position: 0.5,
  padding: 0,
  fullBleed: false,
  align: 'left'
};

exports.default = Screen;