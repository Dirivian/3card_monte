function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React from 'react';
import ReactDOM from 'react-dom';

var stateClasses = ['is-top', 'is-fixed', 'is-bottom'];

var Content = function (_React$PureComponent) {
  _inherits(Content, _React$PureComponent);

  function Content() {
    _classCallCheck(this, Content);

    return _possibleConstructorReturn(this, _React$PureComponent.apply(this, arguments));
  }

  Content.prototype.render = function render() {
    return React.createElement(
      'div',
      { style: this.props.style },
      this.props.children
    );
  };

  return Content;
}(React.PureComponent);

var Feature = function (_React$PureComponent2) {
  _inherits(Feature, _React$PureComponent2);

  function Feature(props) {
    _classCallCheck(this, Feature);

    var _this2 = _possibleConstructorReturn(this, _React$PureComponent2.call(this, props));

    _this2.setFeature = _this2.setFeature.bind(_this2);
    _this2.setRoot = _this2.setRoot.bind(_this2);

    _this2.state = {
      scrollState: 0,
      featureMarginLeft: 0
    };
    return _this2;
  }

  Feature.prototype.setRoot = function setRoot(c) {
    this.rootEl = c;
    this.initialize();
  };

  Feature.prototype.setFeature = function setFeature(c) {
    this.featureEl = c;
    this.initialize();
  };

  Feature.prototype.handleResize = function handleResize() {
    var rootRect = this.rootEl.getBoundingClientRect();
    this.setState({
      featureMarginLeft: -rootRect.left
    });
  };

  Feature.prototype.handleScroll = function handleScroll() {
    if (!this.rootEl) return;
    var rootRect = this.rootEl.getBoundingClientRect();
    var position = rootRect.top / (window.innerHeight - rootRect.height);
    // Update this whenever it changes so that the state is correctly adjusted:
    this.setState({ scrollState: position < 0 ? 0 : position <= 1 ? 1 : 2 });
    // Only update the value when onscreen:
    if (rootRect.top < window.innerHeight && rootRect.bottom > 0) {
      this.props.updateProps({ value: position });
    }
  };

  Feature.prototype.initialize = function initialize() {
    if (!this.rootEl || !this.featureEl) return;

    this.handleResize();
    window.addEventListener('resize', this.handleResize.bind(this));
    window.addEventListener('scroll', this.handleScroll.bind(this));
  };

  Feature.prototype.unwrapChild = function unwrapChild(c) {
    if (function (c) {
      return c.type.name && c.type.name.toLowerCase() === 'wrapper';
    }) {
      return c.props.children[0];
    }
    return c;
  };

  Feature.prototype.unwrapChildren = function unwrapChildren() {
    var _this3 = this;

    return this.props.children.map(function (c) {
      return _this3.unwrapChild(c);
    });
  };

  Feature.prototype.splitFeatureChildren = function splitFeatureChildren() {
    var unwrapped = this.unwrapChildren();
    return React.Children.toArray(this.props.children).reduce(function (memo, child, i) {
      var c = unwrapped[i];
      if (!c.type) {
        memo[1] = memo[1].concat([child]);
        return memo;
      }
      if (c.type.name && c.type.name.toLowerCase() === 'content' || c.type.prototype instanceof Content) {
        memo[0] = child;
      } else {
        memo[1] = memo[1].concat([child]);
      }
      return memo;
    }, [undefined, []]);
  };

  Feature.prototype.render = function render() {
    var _this4 = this;

    var feature = void 0;
    var ps = this.state.scrollState;
    var featureStyles = {
      width: 'calc(100vw - 15px)',
      overflowX: 'hidden',
      height: '100vh',
      marginLeft: ps === 1 ? 0 : this.state.featureMarginLeft + 'px',
      position: ps >= 1 ? 'fixed' : 'absolute',
      bottom: ps === 2 ? 0 : 'auto',
      zIndex: -1
    };

    if (ps === 1) {
      featureStyles.top = 0;
      featureStyles.right = 0;
      featureStyles.bottom = 0;
      featureStyles.left = 0;
    }

    var rootStyles = {
      position: 'relative',
      marginLeft: 0,
      marginRight: 0,
      maxWidth: 'none'
    };

    var _splitFeatureChildren = this.splitFeatureChildren(),
        featureChild = _splitFeatureChildren[0],
        nonFeatureChildren = _splitFeatureChildren[1];

    if (featureChild) {
      var unwrapped = this.unwrapChild(featureChild);
      if (featureChild !== unwrapped) {
        // React.Children.only(featureChild.props.children);
        feature = React.cloneElement(featureChild, {
          children: React.cloneElement(React.Children.toArray(featureChild.props.children)[0], {
            style: featureStyles,
            ref: function ref(_ref) {
              return _this4.setFeature(_ref);
            }
          })
        });
      } else {
        feature = React.cloneElement(featureChild, {
          style: featureStyles,
          ref: function ref(_ref2) {
            return _this4.setFeature(_ref2);
          }
        });
      }
    }

    return React.createElement(
      'figure',
      {
        style: rootStyles,
        className: 'idyll-feature ' + stateClasses[this.state.scrollState],
        ref: function ref(_ref3) {
          return _this4.setRoot(_ref3);
        }
      },
      feature,
      nonFeatureChildren
    );
  };

  return Feature;
}(React.PureComponent);

Feature.defaultProps = {
  children: []
};

Feature._idyll = {
  name: "Feature",
  tagType: "open",
  props: [{
    name: "value",
    type: "number",
    example: "x"
  }]
};

export { Content, Feature as default };