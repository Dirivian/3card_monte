function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React from 'react';

var Header = function (_React$PureComponent) {
  _inherits(Header, _React$PureComponent);

  function Header() {
    _classCallCheck(this, Header);

    return _possibleConstructorReturn(this, _React$PureComponent.apply(this, arguments));
  }

  Header.prototype.render = function render() {
    return React.createElement(
      'div',
      { className: 'article-header' },
      React.createElement(
        'h1',
        { className: 'hed' },
        this.props.title
      ),
      this.props.subtitle && React.createElement(
        'h2',
        { className: 'dek' },
        this.props.subtitle
      ),
      this.props.author && React.createElement(
        'div',
        { className: 'byline' },
        'By: ',
        React.createElement(
          'a',
          { href: this.props.authorLink },
          this.props.author
        )
      )
    );
  };

  return Header;
}(React.PureComponent);

Header._idyll = {
  name: "Header",
  tagType: "closed",
  props: [{
    name: "title",
    type: "string",
    example: '"Article Title"'
  }, {
    name: 'subtitle',
    type: 'string',
    example: '"Article subtitle."'
  }, {
    name: 'author',
    type: 'string',
    example: '"Author Name"'
  }, {
    name: 'authorLink',
    type: 'string',
    example: '"author.website"'
  }]
};

export default Header;