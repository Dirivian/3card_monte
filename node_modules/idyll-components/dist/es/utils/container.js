function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React from 'react';
var ReactDOM = require('react-dom');

var Container = function (_React$Component) {
  _inherits(Container, _React$Component);

  function Container(props) {
    _classCallCheck(this, Container);

    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

    _this.state = {
      expandLeft: 0,
      expandRight: 0
    };

    _this.setPosition = _this.setPosition.bind(_this);
    return _this;
  }

  Container.prototype.componentDidMount = function componentDidMount() {
    window.addEventListener('resize', this.setPosition);
    try {
      this.node = ReactDOM.findDOMNode(this);
      this.setPosition();
    } catch (e) {}
  };

  //shouldComponentUpdate (nextProps, nextState) {
  //return Math.round(nextState.expandLeft) !== Math.round(this.state.expandLeft) ||
  //Math.round(nextState.expandRight) !== Math.round(this.state.expandRight);
  //}

  Container.prototype.setPosition = function setPosition() {
    var expandLeft, expandRight;
    var rect = this.node.getBoundingClientRect();
    var pageWidth = window.innerWidth;

    if (this.props.fullBleed) {
      expandLeft = Infinity;
      expandRight = Infinity;
    } else {
      expandLeft = this.props.expandLeft === undefined ? this.props.expand : this.props.expandLeft;
      expandRight = this.props.expandRight === undefined ? this.props.expand : this.props.expandRight;
    }

    var left = Math.max(rect.left - expandLeft, this.props.padding);
    var right = Math.min(rect.right + expandRight, pageWidth - this.props.padding);

    this.setState({
      expandLeft: left - rect.left,
      expandRight: rect.right - right
    });
  };

  Container.prototype.render = function render() {
    var expandStyle = Object.assign({}, this.props.style || {}, {
      marginLeft: this.state.expandLeft,
      marginRight: this.state.expandRight
    });

    return React.createElement(
      'div',
      {
        style: this.props.style,
        className: this.props.className
      },
      React.createElement(
        'div',
        { style: expandStyle },
        this.props.children
      )
    );
  };

  return Container;
}(React.Component);

Container.defaultProps = {
  padding: 15,
  expand: 0,
  fullBleed: false
};

export default Container;